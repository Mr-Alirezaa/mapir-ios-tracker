// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Location.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials

/// [START declaration]

import Foundation
import SwiftProtobuf
import CoreLocation

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// [START messages]
struct LiveTracker_Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var location: [Double] = []

  var rtimestamp: String = String()

  var direction: Float = 0

  var speed: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "LiveTracker"

extension LiveTracker_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Location"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "rtimestamp"),
    3: .same(proto: "direction"),
    4: .same(proto: "speed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedDoubleField(value: &self.location)
      case 2: try decoder.decodeSingularStringField(value: &self.rtimestamp)
      case 3: try decoder.decodeSingularFloatField(value: &self.direction)
      case 4: try decoder.decodeSingularDoubleField(value: &self.speed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.location.isEmpty {
      try visitor.visitPackedDoubleField(value: self.location, fieldNumber: 1)
    }
    if !self.rtimestamp.isEmpty {
      try visitor.visitSingularStringField(value: self.rtimestamp, fieldNumber: 2)
    }
    if self.direction != 0 {
      try visitor.visitSingularFloatField(value: self.direction, fieldNumber: 3)
    }
    if self.speed != 0 {
      try visitor.visitSingularDoubleField(value: self.speed, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LiveTracker_Location, rhs: LiveTracker_Location) -> Bool {
    if lhs.location != rhs.location {return false}
    if lhs.rtimestamp != rhs.rtimestamp {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LiveTracker_Location {
    init(location: CLLocation) {
        self.init()

        let epochTime = Int(location.timestamp.timeIntervalSince1970)
        self.location = [location.coordinate.longitude, location.coordinate.latitude]
        self.direction = Float(location.course)
        self.speed = location.speed
        self.rtimestamp = "\(epochTime)"
    }
}
